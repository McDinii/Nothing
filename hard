--1.	Создайте процедуру, которая добавляет заказ. Обработайте возможные ошибки. Создайте триггер,
-- который контролирует целостность данных при добавлении заказа.
select * from orders;

select * from products;

create or replace procedure add_order(
v_order_num number,
v_order_date date,
v_cust number,
v_rep number,
v_mfr varchar2,
v_product varchar2,
v_qty number,
v_price decimal
)
as
begin
insert into orders values (v_order_num, v_order_date, v_cust, v_rep, v_mfr, v_product, v_qty, v_price);

commit;
exception
when others then
dbms_output.put_line('An error occurred: ' || SQLERRM); -- Вывод подробной информации об ошибке
end;


begin
 add_order(222000,to_date('2023.01.01','YYYY-MM-DD'), 2117, 101,'QSA','XK48',10,12);
 end;
--insert into orders values(210000,to_date('2023.01.01','YYYY-MM-DD'), 2117, 101,'QSA','XK47',10,12391.12);


create or replace trigger insertation_order_check
before insert on Orders
for each row
declare
v_product_qty number;
begin
 SELECT QTY_ON_HAND INTO v_product_qty
    FROM PRODUCTS
    WHERE MFR_ID = :NEW.MFR
      AND PRODUCT_ID = :NEW.PRODUCT;

    IF v_product_qty IS NULL OR v_product_qty < :NEW.QTY THEN
        -- Выбрасываем исключение, если товар не найден или количество недостаточно
        RAISE_APPLICATION_ERROR(-20001,  ' Invalid product or insufficient quantity' );
    END IF;
    EXCEPTION
    WHEN OTHERS THEN
        -- Выбрасываем исключение для любых других ошибок
        RAISE_APPLICATION_ERROR(-20003,  'An error occurreda: '  || SQLERRM);
END;


--2.	Создайте функцию, которая возвращает количество заказов покупателя помесячно за определенный период.
-- Параметры – покупатель, дата начала периода, дата окончания периода. Обработайте возможные ошибки.
CREATE OR REPLACE FUNCTION COUNT_ORDERS_BY_C(
    p_customer VARCHAR2,
    p_start_date DATE,
    p_end_date DATE
)
RETURN SYS_REFCURSOR
IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
        SELECT TO_CHAR(O.ORDER_DATE,   'YYYY-MM' ) AS MONTH,
               COUNT(*) AS ORDER_COUNT
        FROM ORDERS O
        JOIN CUSTOMERS C ON O.CUST = C.CUST_NUM
        WHERE C.COMPANY = p_customer
          AND O.ORDER_DATE >= p_start_date
          AND O.ORDER_DATE <= p_end_date
        GROUP BY TO_CHAR(O.ORDER_DATE,  'YYYY-MM' )
        ORDER BY TO_CHAR(O.ORDER_DATE,   'YYYY-MM' );

    RETURN v_cursor;
EXCEPTION
    WHEN OTHERS THEN
        -- В случае ошибки, закрываем курсор и выбрасываем исключение
        IF v_cursor IS NOT NULL THEN
            CLOSE v_cursor;
        END IF;
        RAISE;
END;


DECLARE
    v_result SYS_REFCURSOR;
    v_month VARCHAR2(7);
    v_order_count NUMBER;
BEGIN
    v_result := COUNT_ORDERS_BY_C('JCP Inc.', DATE   '2007-01-01' , DATE   '2023-12-31' );

    -- Извлекаем данные из курсора и выводим результат
    LOOP
        FETCH v_result INTO v_month, v_order_count;
        EXIT WHEN v_result%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE( ' Month: '  || v_month ||  ', Order Count: '  || v_order_count);
    END LOOP;

    -- Закрываем курсор
    CLOSE v_result;
END;

SET serveroutput on;


--3.	Создайте процедуру, которая выводит в консоль список всех товаров, не приобретенных ни одним покупателем
-- в определенном году по убыванию количества на складе. Параметр – год. Обработайте возможные ошибки.
create or replace procedure not_solded_product(
v_year number,
v_res_list out sys_refcursor
)
as
begin
open v_res_list for
select * from products p
where not exists (
select * from orders o where extract(year from order_date) = v_year
and O.MFR = P.MFR_ID AND O.PRODUCT = P.PRODUCT_ID
)
order by qty_on_hand desc;
end;
CREATE OR REPLACE PROCEDURE LIST_UNUSED_PRODUCTS(
    p_year NUMBER
)
IS
BEGIN
    FOR prod IN (
        SELECT P.MFR_ID, P.PRODUCT_ID, P.DESCRIPTION, P.QTY_ON_HAND
        FROM PRODUCTS P
        WHERE NOT EXISTS (
            SELECT 1
            FROM ORDERS O
            WHERE O.MFR = P.MFR_ID AND O.PRODUCT = P.PRODUCT_ID AND EXTRACT(YEAR FROM O.ORDER_DATE) = p_year
        )
        ORDER BY P.QTY_ON_HAND DESC
    )
    LOOP
        DBMS_OUTPUT.PUT_LINE( ' MFR_ID:  '  || prod.MFR_ID ||  ' , PRODUCT_ID:  ' || prod.PRODUCT_ID ||  ' , DESCRIPTION:  '  || prod.DESCRIPTION ||  ' , QTY_ON_HAND:  '  || prod.QTY_ON_HAND);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        -- Обработка ошибки
        DBMS_OUTPUT.PUT_LINE( ' Error:  '  || SQLERRM);
END;
/
BEGIN
    LIST_UNUSED_PRODUCTS(2023);
END;



--4.	Создайте функцию, которая подсчитывает количество заказов покупателя за определенный год.
-- Параметры – год, часть имени покупателя или код.

CREATE OR REPLACE FUNCTION Orders_by_year(
    p_year NUMBER,
    p_customer_name VARCHAR2
)
RETURN NUMBER
IS
    v_order_count NUMBER := 0;
BEGIN
    SELECT COUNT(*) INTO v_order_count
    FROM ORDERS O
    JOIN CUSTOMERS C ON O.CUST = C.CUST_NUM
    where extract(year from o.order_date) = p_year and c.company = p_customer_name;

    RETURN v_order_count;
EXCEPTION
    WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE( 'Error: ' || SQLERRM);
END;



DECLARE
    v_order_count NUMBER;
BEGIN
    v_order_count := Orders_by_year(2007,  'Midwest Systems');
    dbms_output.put_line(v_order_count);
END;


--5.	Создайте процедуру, которая сортирует таблицу по определенному столбцу Параметры – название столбца,
-- порядок сортировки (ASC, DESC).
-- Обработайте возможные ошибки.

create or replace procedure sort_table_data(
    p_column_name in varchar2,
    p_sort_order in varchar2
)
as
    v_cursor sys_refcursor;
    v_sql_query varchar2(100);
    v_mfr_id products.product_id%TYPE;
    v_product_id products.product_id%TYPE;
    v_description products.description%TYPE;
    v_price PRODUCTS.PRICE%TYPE;
    v_qty_on_hand PRODUCTS.QTY_ON_HAND%TYPE;
begin
    SELECT COUNT(*)
    INTO v_sql_query
    FROM user_tab_cols
    WHERE table_name = 'PRODUCTS'
    AND column_name = p_column_name;

    IF v_sql_query = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Указанный столбец не существует в таблице');
    END IF;

    v_sql_query :=
        'SELECT MFR_ID, PRODUCT_ID, DESCRIPTION, PRICE, QTY_ON_HAND
         FROM PRODUCTS
         ORDER BY ' || p_column_name || ' ' || p_sort_order;

    OPEN v_cursor FOR v_sql_query;

    LOOP
        FETCH v_cursor INTO v_mfr_id, v_product_id, v_description, v_price, v_qty_on_hand;
        EXIT WHEN v_cursor%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE(
            'MFR_ID: ' || v_mfr_id ||
            ', PRODUCT_ID: ' || v_product_id ||
            ', DESCRIPTION: ' || v_description ||
            ', PRICE: ' || v_price ||
            ', QTY_ON_HAND: ' || v_qty_on_hand
        );
    END LOOP;

    CLOSE v_cursor;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_line('Ошибка: ' || SQLERRM);
end;

begin
sort_table_data('MFR_ID', 'DESC');
end;
